# ------------------------------------------------------------------------------
# Author: Natalie Jackson
#
# ------------------------------------------------------------------------------
# Main module for density checks, from which other density analysis
# modules are called.
# All input parameters for downstream modules solicited from this module.
# This module is called by liqcs.py.
#
# Used for quality control of lidar point density.
#
# General process:
#   0. Input parameters are obtained at the beginning of the
#       if __name__ == "__main__" clause of this script, via calls to density_analysis_config.py.
#       If this script is called from another (e.g., liqcs.py),
#       input parameters are passed to run_main_density_check().
# *         See: density_analysis_config.py
#   1a. Optional step (if check_units parameter is True):
#       Check input rasters for overall average density, to verify
#       the values are reported in the correct units (points per square metre).
# *         See: check_density_raster_units.py
#   1b. Optional step (if check_units parameter is True):
#       If the units are incorrect, the values are normalized by dividing by 25,
#       or another divisor, and checked again.
#       If the unit check fails after normalization, the density checker
#       is aborted.
# *         See: normalize_density_raster.py
#   2. The rasters are exteriorly masked by the project area(s) (AOI), and
#       interiorly masked by water polygons. Lake and river polygon data is
#       downloaded from the British Columbia Geographic Warehouse (BCGW)
#       Freshwater Atlas Atlas (FWA).
#       Ocean data is static from a shapefile generated by
#       Brett Edwards and Spencer Floyd, 2022. The ocean shapefile was created
#       by inverting a BC land polygon from the BCGW. (Which layer was used?)
# *         See: mask_lidar_density_rasters.py
#   3. The density values of the masked rasters are analyzed for descriptive
#       statistics, including a histogram.
# *         See: analyze_density.py
#   4. The descriptive statistics are reported in a pdf document.
# *         See: density_analysis_report.py
#
# ------------------------------------------------------------------------------
# TODO:
#   - Add option to use non fwa polys (e.g. breaklines provided by vendor)
#   - Incorporate feedback on report:
#       - Consider adding an appendix (original suggestion: title page)
#           with additional metadata, such as links to additional outputs
#           (paths to shapefiles used to mask, paths masked rasters),
#           blurb about how statistics are created, (e.g., "Statistics
#           are calculated for raster cells with non-null values"...  any
#           other info from the process steps listed above.)
#       - If making a title page or appendix with additional metadata, pull
#           out the area name from the filename to feature more prominently in the
#           report.
#       - Or, totally rework the report be something more flexible than a pdf,
#           like a super awesome web app:
#               - streamlit?
#                   - Pros: Easy to code
#                   - Cons: Deployment options?
#                   - Recording of Data Science CoP about streamlit:
#                       - https://web.yammer.com/main/org/gov.bc.ca/threads/eyJfdHlwZSI6IlRocmVhZCIsImlkIjoiMTI0Nzk3Mzk2MTk5MDE0NCJ9
#               - shinylive?
#                   - Pros: No server required for deployment
#                   - Cons: Do all the necessary libraries work with Pyodide?
#                   - Documentation:
#                       - https://shiny.rstudio.com/py/docs/shinylive.html
#               - Or just an html output? That'd be cool too.
# ------------------------------------------------------------------------------


# Local imports
try:
    # Use this version of importing (in the try clause) when running from
    # liqcs_gui.py
    import density_analysis.density_analysis_config as density_analysis_config
    import density_analysis.check_density_raster_units as check_density_raster_units
    import density_analysis.mask_lidar_density_rasters as mask_lidar_density_rasters
    import density_analysis.analyze_density as analyze_density

except Exception:
    # Use this version of importing (in the except clause) when running from
    # density_analysis subfolder scripts (e.g., density_analysis_main.py)
    import density_analysis_config
    import check_density_raster_units
    import mask_lidar_density_rasters
    import analyze_density


# ------------------------------------------------------------------------------
# Primary function
# ------------------------------------------------------------------------------

def run_main_density_check(
    input_density_raster_dir,
    project_area_dir,
    output_dir,
    minimum_density_requirement,
    bcgw_credentials,
    check_units=False,
    normalization_divisor=25
):
    """
    Run the density checking pipeline.

    Args:
        input_density_raster_dir (list[str]):
            - Directory containing density raster(s).

        project_area_dir (list[str]):
            - Directory containing shapefile(s) that describe the project area(s).

        output_dir (str):
            - Path to directory in which to save all outputs of this suite.
                (all density analysis results will be saved in a subdirectory
                in the output_dir)

        minimum_density_requirement (int or float):
            - The minimum density requirement in points per square metre,
                as defined by project specifications.

        check_units (bool) (Optional, default False):
            - Option to check the raster values are consistent
                with expected units (points per square metre)

        normalization_divisor (int) (Optional, default 25):
            - Number to divide raster values with bad units to attempt to
                achieve values representing points per square metre.
            - e.g., if the raster units are points per 25 square metres, the
                normalization_divisor to achieve points per square metre is 25.
            - Only relevant if check_units is True.
    """
    # Get the paths to the rasters in the input directory
    input_density_raster_list = density_analysis_config.get_density_raster_list(
        input_density_raster_dir
    )

    # Get the paths to shapefiles in the project area directory
    project_areas_list = density_analysis_config.get_project_areas_list(project_area_dir)

    if check_units:
        # TODO: simplify the logic here
        # Check input rasters for good units (pts/mÂ²).
        # If they're not good, normalize them and check them again.
        # If they're still not good, print some instructions
        # in the terminal and abort this program.
        # Put the paths of all rasters with good units in a list to
        # use in subsequent steps.
        suspect_median_density_limit = 50
        input_density_raster_list = check_density_raster_units.rasters_with_good_units(
            input_density_raster_list,
            output_dir,
            suspect_median_density_limit,
            normalization_divisor
        )

    # Mask the rasters using the project areas and water polygons.
    # Get the density values (arrays of values) for each masked raster.
    density_values = mask_lidar_density_rasters.run(
        input_density_raster_list,
        output_dir,
        project_areas_list,
        bcgw_credentials
    )

    # Analyze the density values for descriptive statistics,
    # including a histogram, and put the results a report.
    analyze_density.analyze_density_values(
        density_values,
        output_dir,
        minimum_density_requirement
    )

    print(
        f"{density_analysis_config.dashline()}"
        f"Density analysis complete!"
        f"\n\nDensity analysis outputs:"
        f"\n\t{output_dir}"
        f"{density_analysis_config.dashline()}"
    )


# ------------------------------------------------------------------------------
# Run this module from here
# ------------------------------------------------------------------------------

def main():
    # --------------------------------------------------------------------------
    # Test condition switches
    # --------------------------------------------------------------------------

    # If test_io is False, the script will ask for a path to the density rasters
    # and a path to save outputs.
    # If test_io is True, this script will look for density rasters in
    # the test data folder, and create a test_output folder in the same
    # location.
    # (test_io is only True in testing scenarios)
    test_io = False

    use_default_minimum_density_requirement = False

    # Delete previous test ouput files
    # (deletes folders in the test area starting with "TEST_OUTPUTS_")
    # Can only be True if test_io is True.
    delete_previous_test_outputs = True

    # Only use input density rasters that are in the "LIMIT_INPUTS subfolder"
    # Only relevant if test_io is True.
    limit_inputs = True

    # --------------------------------------------------------------------------
    # User parameters
    # --------------------------------------------------------------------------

    input_density_raster_dir = density_analysis_config.specify_input_dir(
        test_io=test_io,
        limit_inputs=limit_inputs
    )

    project_area_dir = density_analysis_config.specify_project_areas_dir(test_io=test_io)

    output_dir = density_analysis_config.specify_output_dir(
        test_io=test_io,
        delete_previous_test_outputs=delete_previous_test_outputs
    )

    minimum_density_requirement = density_analysis_config.specify_minimum_density_requirement(
        use_default_minimum_density_requirement=use_default_minimum_density_requirement
    )

    # --------------------------------------------------------------------------
    # BCGW credentials (including input validation)

    bcgw_connection = None
    while not bcgw_connection:
        bcgw_credentials = density_analysis_config.specify_bcgw_credentials()
        print("\nChecking BCGW credentials...")
        bcgw_connection = density_analysis_config.get_bcgw_connection(bcgw_credentials)
    print(
        "Closing BCGW connection (credential check)."
        "\n\nNew connection(s) will be established as needed, "
        "using these verified credentials."
        f"{density_analysis_config.dashline()}"
    )
    bcgw_connection.close()

    # --------------------------------------------------------------------------
    # Execute!
    # --------------------------------------------------------------------------

    run_main_density_check(
        input_density_raster_dir,
        project_area_dir,
        output_dir,
        minimum_density_requirement,
        bcgw_credentials,
        check_units=False,
        normalization_divisor=25
    )


if __name__ == "__main__":
    main()
